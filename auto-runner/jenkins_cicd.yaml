pipeline {
    agent any

    environment {
        // Define environment variables
        DOCKER_IMAGE = "custom-image-${env.BUILD_NUMBER}" // Image name with build number
        DOCKER_TAG = "latest"
        ARTIFACTORY_URL = "https://your-artifactory-url"
        ARTIFACTORY_REPO = "your-docker-repo"
        SONARQUBE_SERVER = "SonarQube-Server" // Set this to your SonarQube server name in Jenkins settings
        KUBECONFIG_CREDENTIAL_ID = "your-kubeconfig-credentials-id"
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from Git
                git branch: 'main', url: 'https://your-repo-url.git'
            }
        }

        stage('Build') {
            steps {
                // Build the project (replace with your build tool)
                sh 'mvn clean install'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                // Set the necessary variables for SonarQube Scanner
                SONAR_SCANNER_HOME = tool 'SonarQube Scanner'
            }
            steps {
                withSonarQubeEnv('SonarQube-Server') {
                    // Run SonarQube analysis
                    sh "${SONAR_SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                // Build the Docker image with the custom name
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }

        stage('Scan Docker Image with Trivy') {
            steps {
                // Run Trivy scan on the Docker image
                sh "trivy image ${DOCKER_IMAGE}:${DOCKER_TAG}"
            }
        }

        stage('Push Docker Image to JFrog Artifactory') {
            steps {
                script {
                    docker.withRegistry("${ARTIFACTORY_URL}/${ARTIFACTORY_REPO}", 'artifactory-credentials-id') {
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    withCredentials([file(credentialsId: "${KUBECONFIG_CREDENTIAL_ID}", variable: 'KUBECONFIG')]) {
                        // Replace with your Kubernetes deployment commands
                        sh """
                            kubectl set image deployment/your-deployment-name your-container-name=${DOCKER_IMAGE}:${DOCKER_TAG} -n your-namespace
                            kubectl rollout status deployment/your-deployment-name -n your-namespace
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace and Docker images
            cleanWs()
            sh "docker rmi ${DOCKER_IMAGE}:${DOCKER_TAG}"
        }
    }
}
